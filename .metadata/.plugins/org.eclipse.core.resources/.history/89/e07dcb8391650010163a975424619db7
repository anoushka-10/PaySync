package com.paysync; // Or your appropriate config package e.g., com.paysync.config

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.CorsWebFilter;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.Collections;

@Configuration
public class CorsConfig {

    @Bean
    public CorsWebFilter corsWebFilter() {
        
        CorsConfiguration corsConfig = new CorsConfiguration();
        // This allows your frontend running on localhost:3000 to make requests
        corsConfig.setAllowedOrigins(Collections.singletonList("http://localhost:3000"));
        
        // You can set how long the browser should cache the CORS preflight response
        corsConfig.setMaxAge(3600L); 
        
        // Allow all standard HTTP methods (GET, POST, PUT, DELETE, etc.)
        corsConfig.addAllowedMethod("*"); 
        
        // Allow all headers to be sent from the frontend
        corsConfig.addAllowedHeader("*"); 
        
        // This is important for sending back cookies or auth tokens
        corsConfig.setAllowCredentials(true); 

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        
        // Apply this CORS configuration to every single route ("/**") in your gateway
        source.registerCorsConfiguration("/**", corsConfig);

        return new CorsWebFilter(source);
    }
}
